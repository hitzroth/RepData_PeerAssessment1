type(xyplot(rnorm(100)~rnorm(100)))
class(xyplot(rnorm(100)~rnorm(100)))
library(nlme)
?xyplot
xyplot(weight~Time|Diet, BodyWeight)
xyplot(weight~Time|BodyWeight, Diet)
xyplot(weight~Time|Diet, Bodyweight)
xyplot(weight~Time|Diet, BodyWeight)
names(Diet)
names(BodyWeight)
levels(BodyWeight$Rat)
levels(BodyWeight$Diet)
xyplot(weight~Time|Rat, BodyWeight)
?panel.abline
?splom
?print.trellis
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
?text
?points
?llines
?trellis.par.set
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
?kernlab
??kernlab
data(spam)
str(spam[,1:5])
names(spam)
set.seed(3435)
source('~/.active-rstudio-document')
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator == 1,]
testSpam = spam[trainIndicator == 0,]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:57] + 1))))
plot(hClusterUpdated)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
warnings()
names(trainSpam)[which.min(cvError)]
?reformulate
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
?predict
table(predictedSpam, testSpam$type)
(61 + 458)/(1346 + 458 + 61 + 449)
library(knittr)
library(knitr)
install.libraries(xtable)
install.library(xtable)
?library
install.packages(xtable)
install.packages("xtable")
getwd()
setwd("Courses/coursera/5\ -\ Reproducible\ Research\RepData_PeerAssessment1")
setwd("Courses/coursera/5\ -\ Reproducible\ Research/RepData_PeerAssessment1")
setwd("Courses/coursera/Data Science/5\ -\ Reproducible\ Research/RepData_PeerAssessment1")
activity <- read.csv(activity.csv)
activity <- read.csv("activity.csv")
head(activity)
class(activity$date)
factors(activity$date)
factor(activity$date)
head(activity)
levels(activity$date)
class(activity$date)
levels(activity$interval)
class(activity$interval)
library(date)
table(activity$interval)
activity$interval[1]
activity$interval[0]
activity$interval[1]
activity$interval[2]
activity$date[60]
activity$interval[1]
activity$interval[60]
activity$interval[6]
activity$interval[10]
activity$interval[12]
activity$interval[13]
log(100)
10^log(100)
10^lg(100)
10^log(100,10)
log(100,10)
log(105,10)
int(log(105,10))
integer(log(105,10))
floor(log(105,10))
log(105,10)-floor(log(105,10))
10^(log(105,10)-floor(log(105,10)))
floor(log(105,10)))
floor(log(105,10))
log(105,10)
log(105,10)-2
10^(log(105,10)-2)
log(5,10)
as.character(105)
?as.character
substr(as.character(10))
substr(as.character(10), 0, -2)
substr(as.character(10), 0, 1)
substr(as.character(10), 0, 2)
length(activity$interval)
head(range(length(activity$interval)))
range(10)
range(0,10)
0:10
0:9
activity$interval[0]
head(activity$interval[1:length(activity$interval)])
x <- 5
length(as.character(activity$interval[2]))
length(as.character(activity$interval[10]))
nchar(as.character(activity$interval[10]))
for i in 1:10
?for
??for
paste("0", "5", sep = "")
paste("000", "5", sep = "")
rep(0,3)
rep("0",3)
paste(rep("0",3))
paste(rep("0",3), sep = "")
paset(1:12)
paste(1:12)
cat(rep("0",3))
t <- a:10
t <- 1:10
s <- t[1:length(t)]*2
s
s <- as.character(t[1:length(t)])
s
library(dplyr)
glimpse(activity)
?as.date
??as.date
library(lubridate)
105 %/% 100
105 %% 100
head(activity$date)
?hms
hm(5)
hm("5")
hm("0005")
hm(c("", "5"))
hm(c("0", "5"))
hm("0", "5")
hm(0, 5)
hm(0, 05)
hm(1, 05)
hm(c("0:5"))
hm(c("0:05"))
ymd_hms(activity$date[4736], hm("0:5"))
ymd_hms(activity$date[4736])
ymd(activity$date[4736])
ymd(activity$date[4736], "0:5:0")
ymd(activity$date[4736], "0:05:0")
View(activity)
View(activity)
ymd_hms(activity$date[4736], activity$interval[4736])
hm(activity$interval[4736])
activity$interval[4736]
as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100, sep =":")
paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), sep =":")
hm(paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), sep =":"))
hms(paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
ymd_hms(activity$date[4736] , paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
?ymd_hms
as.character(activity$interval[4736])
as.character(activity$date[4736])
ymd_hms(as.character(activity$date[4736]) , paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
ymd(as.character(activity$date[4736]))
ymd(activity$date[4736])
paste(as.character(activity$date[4736]) , paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
x >-paste(as.character(activity$date[4736]) , paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
x <- paste(as.character(activity$date[4736]) , paste(as.character(activity$interval[4736] %/% 100), as.character(activity$interval[4736] %% 100), "00" , sep =":"))
ymd_hms(x)
mutate(activity, newdate = ymd_hms(paste(as.character(date) , paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep =":"))))
activity <- mutate(activity, newdate = ymd_hms(paste(as.character(date) , paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep =":"))))
activity <- mutate(activity, date = ymd_hms(paste(as.character(date) , paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep =":"))))
head(activity)
activity <- read.csv("activity.csv")
activity <- transmute(activity, date = ymd_hms(paste(as.character(date) , paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep =":"))))
activity
activity <- read.csv("activity.csv")
?transmute
View(activity)
View(activity)
activity <- transmute(activity, steps = steps, date = ymd_hms(paste(as.character(date) , paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep =":"))))
head(activity)
?sum
activity <- read.csv("activity.csv")
activity2 <- transmute(activity, steps = steps,
date = ymd_hms(
paste(as.character(date) ,
paste(as.character(interval %/% 100),
as.character(interval %% 100),
"00" , sep =":")
)
)
)
activity %>% select(steps, date) %>% summarize(funs(sum))
totals <- activity %>% group_by(date) %>% summarize(totals = sum(steps, na.rm = T))
head(totals)
totals[1:4]
totals[1:2][3:]
totals2 <- activity %>% group_by(floor(date)) %>% summarize(totals = sum(steps, na.rm = T))
totals2 <- activity2 %>% group_by(floor(date)) %>% summarize(totals = sum(steps, na.rm = T))
totals2 <- activity2 %>% group_byfloor(date) %>% summarize(totals = sum(steps, na.rm = T))
totals2 <- activity2 %>% group_by(date) %>% summarize(totals = sum(steps, na.rm = T))
rm(totals2)
rm(s,t,x)
mean(totals[1])
average(totals[1])
?mean
head(totals[1])
head(totals[0])
head(totals[2])
mean(totals[2])
mean(totals[2], na.rm = T)
head(totals)
weekday(activity$date[1])
?ymd
mean(totals$totals)
rm(totals)
total <- activity %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = T))
mean(total$steps)
median(total$steps)
?hist
hist(total$steps)
?hist
hist(total$steps, xlab = "Steps per Day",
main = "Histogram of Steps per Day")
hist(total$steps, xlab = "Steps per Day",
main = "")
?abline
abline(h = mean(total$steps), h = median(total$steps))
abline(h = mean(total$steps)) abline(h = median(total$steps))
abline(h = mean(total$steps))
abline(h = median(total$steps))
abline(v = median(total$steps))
abline(v = mean(total$steps))
?abline
?knitr
total2 <- activity %>%
group_by(interval) %>%
summarize(steps = sum(steps, na.rm = T))
hist(total2)
hist(total2$steps)
total2 <- activity %>%
group_by(interval) %>%
summarize(steps = mean(steps, na.rm = T))
hist(total2$steps)
plot(total2$interval, total2$steps)
?plot
plot(total2$interval, total2$steps, type = "l")
plot(total2$interval, total2$steps*12, type = "l", ylab = "Mean Step Rate", xlab = "Time")
plot(total2$interval, total2$steps*12, type = "l", ylab = "Mean Steps per Hour", xlab = "Time")
hm(paste(as.character(total2$interval[1] %/% 100), as.character(total2$interval[1] %% 100), sep = ":"))
hm(paste(as.character(total2$interval[2] %/% 100), as.character(total2$interval[2] %% 100), sep = ":"))
hms(paste(as.character(total2$interval[2] %/% 100), as.character(total2$interval[2] %% 100), "00" , sep = ":"))
tmp <- total2 %>% mutate(hms(paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep = ":")))
head(tmp)
tmp <- total2 %>% mutate(time = hms(paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep = ":")))
head(tmp)
total2 <- total2 %>% mutate(time = hms(paste(as.character(interval %/% 100), as.character(interval %% 100), "00" , sep = ":")))
plot(total2$time, total2$steps*12, type = "l", ylab = "Mean Steps per Hour", xlab = "Time")
?plot
?hms
?strptime
?lubridate
plot(total2$time, total2$steps*12, type = "l", ylab = "Mean Steps per Hour", xlab = "Time")
plot(total2$time, total2$steps, type = "l", ylab = "Mean Steps per Hour", xlab = "Time")
?range
range(total2$time)
?tseries
?timeseries
??timeseries
?lubridate
plot(as.interval(total2$time), total2$steps, type = "l", ylab = "Mean Steps per Hour", xlab = "Time")
total2$time[1]
as.interval(total2$time[1])
as.numeric(total2$time[1])
as.numeric(total2$time[2])
as.numeric(total2$time[3])
hour(total2$time[3])
hour(total2$time[3])+minute(total2$time[3])
total2$time[3]
floor_date(activity2$date[4], "day")
total3 <- activity %>%
group_by(floor_date(date, "day")) %>%
summarize(steps = mean(steps, na.rm = T))
floor_date(activity2$date[4], "hour")
floor_date(activity2$date[4], unit= "hour")
activity2$date[4]
celing_date(activity2$date[4], unit= "hour")
ceiling_date(activity2$date[4], unit= "hour")
names(total2)
head(total2)
plot(total2$interval %% 100 + (total2$interval %/% 100)/60, total2$steps )
total2$interval[10] %% 100 + (total2$interval[10] %/% 100)/60
total2$interval[10] %/% 100
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps )
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l")
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l", xlim = c(0,24))
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l", xlim = c(0,25))
seq(0,24,4)
names(total2)
plot(total2$steps ~ total2$time)
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l", xlim = seq(0,24,6))
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l", xaxt = F)
plot(total2$interval %/% 100 + (total2$interval %% 100)/60, total2$steps , type = "l", xaxt ='n')
axis(side = 1, at = seq(0,24,6))
total2$decint <- (total2$interval %/% 100 + (total2$interval %% 100)/60)*100
plot(total2$interval %/% 100 + (total2$interval %% 100)/60,
total2$steps , type = "l", xaxt ='n',
xlab = "Time",
ylab = "Mean Steps")
axis(side = 1, at = seq(0,2400,600))
head(total2)
total2$interval[1255] %/% 100 + (total2$interval[1255] %% 100)/60)
total2$interval[1255] %/% 100 + (total2$interval[1255] %% 100)/60
total2$interval[125] %/% 100 + (total2$interval[125] %% 100)/60
total2$interval[125]
total2$decint <- total2$interval %/% 100 + (total2$interval %% 100)/60
total2$decint <- (total2$interval %/% 100 + (total2$interval %% 100)/60)*100
plot(total2$interval %/% 100 + (total2$interval %% 100)/60,
total2$steps , type = "l", xaxt ='n',
xlab = "Time",
ylab = "Mean Steps")
axis(side = 1, at = seq(0,2400,600))
total2$decint <- (total2$interval %/% 100 + (total2$interval %% 100)/60)
head(total2)
max(total2$decint)
total2$decint <- (total2$interval %/% 100 + (total2$interval %% 100)/60)*100
plot(total2$steps ~ total2$decint, type = "l", xaxt ='n',
xlab = "Time",
ylab = "Mean Steps")
axis(side = 1, at = seq(0,2400,600))
qplot(total$steps, geom = "histogram")
library(ggplot2)
qplot(total$steps, geom = "histogram")
qplot(total$steps, geom = "histogram", binwidth = 1000)
qplot(total$steps, geom = "histogram", binwidth = 5000)
qplot(total$steps, geom = "histogram", binwidth = 2500)
qplot(total$steps, geom = "histogram", binwidth = 1000)
qplot(total$steps, geom = "histogram")
qplot(total$steps, geom = "histogram", binwidth = 2400/30)
qplot(total$steps, geom = "histogram", binwidth = 24/30)
qplot(total$steps, geom = "histogram", binwidth = 24000/30)
qplot(total$steps, geom = "histogram", binwidth = 1000)
qplot(total$steps, geom = "histogram", binwidth = 500)
qplot(total$steps, geom = "histogram", binwidth = 750)
?weekdays
weekdays(as.Date("2014-10-18"))
?aes
View(total2)
qplot(total2$steps ~ total2$time)
qplot(total2$steps, total2$time)
qplot(total2$steps, total2$decint)
qplot(total2$time ~ total2$steps)
qplot(total2$time, total2$steps)
qplot(total2$decint, total2$steps)
class(total2$time)
?lubridate
parse_date_time("5", format = "H!M!")
parse_date_time("0005", format = "H!M!")
parse_date_time("0005", format = "HM")
parse_date_time("0005", format = "H M")
parse_date_time("00 05", format = "H M")
parse_date_time("00-05", "H-M")
parse_date_time("5", "HM")
parse_date_time("0005", "HM")
head(total)
total$steps[1] <- 1
head(total)
total$steps[1] <- 0
2==3
total3 <- total2 %>%
mutate(interval2 = ifelse(
nchar(as.character(interval))==1,
paste("000", as.character(interval)),
ifelse(
nchar(as.character(interval))==2,
paste("00", as.character(interval)),
ifelse(
nchar(as.character(interval))==3,
paste("0", as.character(interval)),
as.character(interval)
)
)
)
)
head(total3)
total3 <- total2 %>%
mutate(interval2 = ifelse(
nchar(as.character(interval))==1,
paste("000", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==2,
paste("00", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==3,
paste("0", as.character(interval), sep = ""),
as.character(interval)
)
)
)
)
head(total3)
View(activity)
activity <- activity %>%
mutate(
interval = ifelse(
nchar(as.character(interval))==1,
paste("000", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==2,
paste("00", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==3,
paste("0", as.character(interval), sep = ""),
as.character(interval)
)
)
)
)
View(activity)
activity2 <- activity %>%
transmute(steps = steps,
date = parse_date_time2(
paste(as.character(date), interval),
"Y-m-d HM"
)
)
View(activity)
View(activity2)
time(activity2$date)
time(activity2$date[2])
?time
?lubridate
weekdays(activity2$date[2])
?weekdays
View(activity)
View(activity)
View(activity)
View(activity)
activity <- read.csv("activity.csv")
activity <- activity %>%
mutate(
interval2 = ifelse(
nchar(as.character(interval))==1,
paste("000", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==2,
paste("00", as.character(interval), sep = ""),
ifelse(
nchar(as.character(interval))==3,
paste("0", as.character(interval), sep = ""),
as.character(interval)
)
)
)
)
activity2 <- activity %>%
transmute(steps = steps,
date = parse_date_time2(
paste(as.character(date), interval),
"Y-m-d HM"
)
)
View(activity)
View(activity2)
View(activity2)
